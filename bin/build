#!/usr/bin/env bash

set -eu

layers_dir="$1"
env_dir="$2/env"

if compgen -G "${env_dir}/*" > /dev/null; then
  for var in ${env_dir}/*; do
    declare "$(basename ${var})=$(<${var})"
  done
fi

install_terraform() {
  # create a layer for terrform
  local tf_layer=$layers_dir/terraform

  local tf_version=${TERRAFORM_VERSION:-"0.14.4"}
  local tf_sha=$(cat $CNB_BUILDPACK_DIR/files.json | jq -r .terraform.\"${tf_version}\".sha256)
  local tf_url=$(cat $CNB_BUILDPACK_DIR/files.json | jq -r .terraform.\"${tf_version}\".url)
  if [ -f ${tf_layer}.toml ] && [ -n "${tf_sha}" ] && cat ${tf_layer}.toml | grep -q $tf_sha; then
    echo "Using cached version ${tf_version}"
  else
    if [ -z "$tf_url" ] || [ "$tf_url" == "null" ]; then
      echo "Could not find URL for Terraform version $tf_version. Please check files.json."
      exit 1
    fi

    echo "Installing version ${tf_version}"
    echo "Downloading binary from ${tf_url}"
    rm -rf $tf_layer
    mkdir -p $tf_layer/bin
    curl --retry 3 -o $tf_layer/tf.zip -L "$tf_url"
    actual_sha="$(sha256sum $tf_layer/tf.zip | awk '{print $1}')"

    if [ "$tf_sha" != "$actual_sha" ]; then
      echo "Terraform SHA did not match expected value! The ZIP file may be corrupted."
      exit 1
    fi

    unzip $tf_layer/tf.zip -d $tf_layer/bin
    chmod +x $tf_layer/bin
    rm $tf_layer/tf.zip
  fi

  echo "Creating launch configuration"
  cat <<EOF > ${layers_dir}/launch.toml
[[processes]]
type = "terraform"
command = "terraform"

[[processes]]
type = "bash"
command = "/bin/bash"
EOF

  cat <<TOML > ${tf_layer}.toml
launch = true
cache = true

[metadata]
version = "$tf_version"
sha256 = "$tf_sha"
TOML
}

echo "[terraform]"
install_terraform
